{"version":3,"sources":["app/hooks.ts","features/formulaScreenSlice.ts","components/FormulaScreen.tsx","features/outputScreenSlice.ts","components/AllClearKey.tsx","components/OperatorKey.tsx","components/DotKey.tsx","components/EqualKey.tsx","components/NumberKey.tsx","components/ZeroKey.tsx","components/Keys.tsx","components/OutputScreen.tsx","components/Calculator.tsx","App.tsx","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","formulaScreenSlice","createSlice","name","initialState","value","reducers","addChar","state","action","payload","reset","removeLastChar","slice","actions","selectFormulaScreen","formulaScreen","FormulaScreen","className","outputScreenSlice","selectOutputScreen","outputScreen","AllClearKey","dispatch","onClick","resetFormulaScreen","resetOutputScreen","id","OperatorKey","props","includes","operatorKeys","children","addCharToOutputScreen","Object","values","lastOneWithChildren","lastTwo","regex","RegExp","joinedOperators","join","test","DotKey","operators","re","numbers","split","addCharToFormulaScreen","length","EqualKey","evaluate","NumberKey","addCharToFormula","addCharToOutput","ZeroKey","Keys","OutputScreen","Calculator","style","fontFamily","App","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d36decdc.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../app/store\";\n\nexport const formulaScreenSlice = createSlice({\n  name: 'formulaScreen',\n  initialState: {\n    value: '',\n  },\n  reducers: {\n    addChar : (state, action: PayloadAction<string>) => {\n      state.value += action.payload\n    },\n    reset : (state) => {\n      state.value = ''\n    },\n    removeLastChar: (state) => {\n      if (state.value) state.value = state.value.slice(0, -1)\n    },\n  },\n})\n\nexport const { addChar, reset, removeLastChar } = formulaScreenSlice.actions\nexport const selectFormulaScreen = (state: RootState) => state.formulaScreen.value\nexport default formulaScreenSlice.reducer;","import { useAppSelector } from \"../app/hooks\"\nimport { selectFormulaScreen } from \"../features/formulaScreenSlice\"\n\n\nexport const FormulaScreen = () => {\n  const formulaScreen = useAppSelector(selectFormulaScreen)\n\n  return (\n    <div className=\"w-full h-6 text-orange-peel flex justify-end text-2xl\">\n      <span className=\"\">{formulaScreen}</span>\n    </div>\n  )\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../app/store\";\n\nexport const outputScreenSlice = createSlice({\n  name: 'ouputScreen',\n  initialState: {\n    value: '0',\n  },\n  reducers: {\n    addChar : (state, action: PayloadAction<string>) => {\n      state.value += action.payload\n    },\n    reset : (state) => {\n      state.value = ''\n    },\n  },\n})\n\nexport const { addChar, reset } = outputScreenSlice.actions\nexport const selectOutputScreen = (state: RootState) => state.outputScreen.value\nexport default outputScreenSlice.reducer;","import React from 'react'\nimport { useAppDispatch } from '../app/hooks'\nimport { reset as resetFormulaScreen } from '../features/formulaScreenSlice'\nimport { addChar, reset as resetOutputScreen } from '../features/outputScreenSlice'\n\nexport const AllClearKey = () => {\n  const dispatch = useAppDispatch()\n\n  const handleClick = () => {\n    dispatch(resetFormulaScreen())\n    dispatch(resetOutputScreen())\n    dispatch(addChar('0'))\n  }\n\n  return (\n    <div className=\"col-span-2 bg-medium-carmine flex items-center justify-center hover:outline-grey\" onClick={handleClick} id=\"clear\">\n      AC\n    </div>\n  )\n}\n","\nimport { useAppDispatch, useAppSelector } from '../app/hooks'\nimport { addChar, removeLastChar, selectFormulaScreen, reset as resetFormulaScreen } from '../features/formulaScreenSlice'\nimport { reset, addChar as addCharToOutputScreen, selectOutputScreen } from '../features/outputScreenSlice'\n\nexport const OperatorKey = (props: OperatorKeyProps) => {\n  const dispatch = useAppDispatch()\n  const formulaScreen = useAppSelector(selectFormulaScreen)\n  const outputScreen = useAppSelector(selectOutputScreen)\n\n  const handleClick = () => {\n    if ( formulaScreen.includes('=')) {\n      dispatch(resetFormulaScreen())\n      dispatch(addChar(outputScreen))\n      dispatch(addChar(operatorKeys[props.children]))\n      dispatch(reset())\n      dispatch(addCharToOutputScreen('0'))\n      return\n    }\n    dispatch(reset())\n    dispatch(addCharToOutputScreen('0'))\n    if ( formulaScreen ) {\n      if ( !Object.values(operatorKeys).includes(formulaScreen.slice(-1))) {\n        dispatch(addChar(operatorKeys[props.children]))\n      } else {\n        const lastOneWithChildren = formulaScreen.slice(-1) + props.children\n        const lastTwo = formulaScreen.slice(-2)\n        const regex = new RegExp(`[^-]-`)\n        const joinedOperators = Object.values(operatorKeys).join('')\n        const regexLastTwo = new RegExp(`[${joinedOperators}]{2}`)\n        if (regexLastTwo.test(lastTwo)) {\n          dispatch(removeLastChar())\n          dispatch(removeLastChar())\n          dispatch(addChar(operatorKeys[props.children]))\n        }\n\n        if( !regex.test(lastOneWithChildren) || props.children !== '-') dispatch(removeLastChar())\n        dispatch(addChar(operatorKeys[props.children]))\n      }\n    }\n  }\n\n  return (\n    <div className=\"bg-dim-gray flex items-center justify-center hover:outline-grey\" onClick={handleClick} id={props.id}>\n      {props.children}\n    </div>\n  )\n}\n\ninterface OperatorKeyProps {\n  children: string,\n  id: string,\n}\n\nexport const operatorKeys: {[key: string]: string} = {\n  'x': '*',\n  '/': '/',\n  '+': '+',\n  '-': '-',\n}\n","import { useAppDispatch, useAppSelector } from \"../app/hooks\"\nimport { addChar as addCharToFormulaScreen, selectFormulaScreen } from \"../features/formulaScreenSlice\"\nimport { addChar as addCharToOutputScreen } from \"../features/outputScreenSlice\"\nimport { operatorKeys } from \"./OperatorKey\"\n\nexport const DotKey = (props: DotKeyProps) => {\n  const operators = Object.values(operatorKeys)\n  const formulaScreen = useAppSelector(selectFormulaScreen)\n  const dispatch = useAppDispatch()\n\n  const handleClick = () => {\n    // */+-\n    const joinedOperators = operators.join('')\n    const re = new RegExp(`[${joinedOperators}]+`, \"g\")\n    const numbers = formulaScreen.split(re)\n    if (formulaScreen === '') {\n      dispatch(addCharToFormulaScreen('0'))\n      dispatch(addCharToFormulaScreen('.'))\n      dispatch(addCharToOutputScreen('.'))\n    } else {\n      const number = numbers[numbers.length - 1]\n      if (!number.includes('.')) {\n        dispatch(addCharToFormulaScreen('.'))\n        dispatch(addCharToOutputScreen('.'))\n      }\n    }\n  }\n\n  return (\n    <div className={`bg-charcoal flex items-center justify-center hover:outline-grey`} onClick={handleClick} id=\"decimal\">\n      {props.children}\n    </div>\n  )\n}\n\ninterface DotKeyProps {\n  children: string,\n}\n","import { evaluate } from \"mathjs\"\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\"\nimport { addChar as addCharToFormulaScreen, selectFormulaScreen } from \"../features/formulaScreenSlice\"\nimport { addChar as addCharToOutputScreen, reset } from \"../features/outputScreenSlice\"\n\nexport const EqualKey = () => {\n  const formulaScreen = useAppSelector(selectFormulaScreen)\n  const dispatch = useAppDispatch()\n\n  const handleClick = () => {\n    if ( formulaScreen.includes('=') ) return\n    const value = evaluate(formulaScreen)\n    dispatch(reset())\n    dispatch(addCharToOutputScreen(value))\n    dispatch(addCharToFormulaScreen('= '))\n    dispatch(addCharToFormulaScreen(value))\n  }\n\n  return (\n    <div className=\"bg-prussian-blue row-span-2 flex items-center justify-center hover:outline-grey\" onClick={handleClick} id=\"equals\">\n      =\n    </div>\n  )\n}\n","import { useAppDispatch, useAppSelector } from \"../app/hooks\"\nimport { addChar as addCharToFormula, reset as resetFormulaScreen, selectFormulaScreen } from \"../features/formulaScreenSlice\"\nimport { addChar as addCharToOutput, reset as resetOutputScreen, selectOutputScreen } from \"../features/outputScreenSlice\"\n\nexport const NumberKey = (props: NumberKeyProps) => {\n  const dispatch = useAppDispatch()\n  const formulaScreen = useAppSelector(selectFormulaScreen)\n  const outputScreen = useAppSelector(selectOutputScreen)\n  const handleClick = () => {\n    if (formulaScreen.includes('=')) {\n      dispatch(resetFormulaScreen())\n      dispatch(resetOutputScreen())\n    }\n    if (formulaScreen === '0') {\n      dispatch(resetFormulaScreen())\n    }\n    if (outputScreen === '0') {\n      dispatch(resetOutputScreen())\n    }\n    dispatch(addCharToFormula(props.children))\n    dispatch(addCharToOutput(props.children))\n  }\n\n  return (\n    <div className={`bg-charcoal flex items-center justify-center hover:outline-grey`} onClick={handleClick} id={props.id}>\n      {props.children}\n    </div>\n  )\n}\n\ninterface NumberKeyProps {\n  children: string,\n  id: string,\n}\n","import { useAppDispatch, useAppSelector } from \"../app/hooks\"\nimport { addChar as addCharToFormula, selectFormulaScreen } from \"../features/formulaScreenSlice\"\nimport { addChar as addCharToOutput, selectOutputScreen } from \"../features/outputScreenSlice\"\n\nexport const ZeroKey = (props: ZeroKeyProps) => {\n\n  const dispatch = useAppDispatch()\n  const formulaScreen = useAppSelector(selectFormulaScreen)\n  const outputScreen = useAppSelector(selectOutputScreen)\n\n  const handleClick = () => {\n    if (formulaScreen !== '0') {\n      dispatch(addCharToFormula(props.children))\n    }\n    if ( outputScreen !== '0') {\n      dispatch(addCharToOutput(props.children))\n    }\n  }\n\n  return (\n    <div className=\"bg-charcoal col-span-2 flex items-center justify-center hover:outline-grey\" onClick={handleClick} id={props.id}>\n      {props.children}\n    </div>\n  )\n}\n\ninterface ZeroKeyProps {\n  children: string,\n  id: string,\n}\n","import { AllClearKey } from \"./AllClearKey\"\nimport { DotKey } from \"./DotKey\"\nimport { EqualKey } from \"./EqualKey\"\nimport { NumberKey } from \"./NumberKey\"\nimport { OperatorKey } from \"./OperatorKey\"\nimport { ZeroKey } from \"./ZeroKey\"\n\nexport const Keys = () => {\n  return (\n    <div className=\"text-white font-share-tech-mono w-full h-full grid grid-cols-4 grid-rows-5 text-xl gap-0.25\">\n      <AllClearKey />\n      <OperatorKey id=\"divide\">/</OperatorKey>\n      <OperatorKey id=\"multiply\">x</OperatorKey>\n      <NumberKey id=\"seven\">7</NumberKey>\n      <NumberKey id=\"eight\">8</NumberKey>\n      <NumberKey id=\"nine\">9</NumberKey>\n      <OperatorKey id=\"subtract\">-</OperatorKey>\n      <NumberKey id=\"four\">4</NumberKey>\n      <NumberKey id=\"five\">5</NumberKey>\n      <NumberKey id=\"six\">6</NumberKey>\n      <OperatorKey id=\"add\">+</OperatorKey>\n      <NumberKey id=\"one\">1</NumberKey>\n      <NumberKey id=\"two\">2</NumberKey>\n      <NumberKey id=\"three\">3</NumberKey>\n      <EqualKey />\n      <ZeroKey id=\"zero\">0</ZeroKey>\n      <DotKey>.</DotKey>\n    </div>\n  )\n}\n","import { useAppSelector } from \"../app/hooks\"\nimport { selectOutputScreen } from \"../features/outputScreenSlice\"\n\nexport const OutputScreen = () => {\n  const outputScreen = useAppSelector(selectOutputScreen)\n\n  return (\n    <div id= \"display\">\n      <div className=\"w-full h-8 text-white flex justify-end text-3xl\">\n        <span className=\"\">{outputScreen}</span>\n      </div>\n    </div>\n  )\n}\n","import { FormulaScreen } from \"./FormulaScreen\"\nimport { Keys } from \"./Keys\"\nimport { OutputScreen } from \"./OutputScreen\"\n\nexport const Calculator = () => {\n  return (\n    <div className=\"w-80 h-96 bg-black m-auto border-corn-flower-blue border-2 p-1 flex flex-col\">\n      <div className=\"font-digital-7\" style={{ fontFamily: 'Digital 7'}}>\n        <FormulaScreen />\n        <OutputScreen />\n      </div>\n      <Keys />\n    </div>\n  )\n}\n","import { Calculator } from \"./components/Calculator\";\n\nconst App = () => {\n  return (\n    <div className=\"App bg-blue-haze w-full h-full absolute flex\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport formulaScreenSlice from '../features/formulaScreenSlice';\nimport outputScreenSlice from '../features/outputScreenSlice';\n\nexport const store = configureStore({\n  reducer: {\n    formulaScreen: formulaScreenSlice,\n    outputScreen: outputScreenSlice,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}